{"version":3,"sources":["script.js"],"names":["AppModule","timeFormatter","timestamp","formattedTime","Date","hours","getHours","min","getMinutes","weatherData","city","weekDays","temp","document","querySelector","weatherIcon","cityName","sunrise","sunset","dayParas","querySelectorAll","dayIcons","dayTemps","fetch","method","then","response","ok","json","console","error","statusText","res","textContent","this","list","main","toFixed","name","src","weather","icon","alt","description","i","j","length","day","dt","getDay","getDate","catch","EventModule","event","AppMod","searchBtn","cityField","weatherFunc","value","focus","addEventListener","e","key","window","onload"],"mappings":"AAAA,aAaA,MAAMA,UAAY,CAEdC,cAAeC,GAEX,MAAMC,EAAgB,IAAIC,KAAe,IAAVF,GAC/B,IAAIG,EAAQF,EAAcG,WACtBC,EAAMJ,EAAcK,aAMxB,OAHAH,EAAQA,EAAQ,GAAK,IAAIA,IAAUA,EACnCE,EAAMA,EAAM,GAAK,IAAIA,IAAQA,EAEtB,GAAGF,OAAWE,KAGzBE,YAAaC,GACT,MAAMC,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,OAEvDC,EAAOC,SAASC,cAAc,oBAC9BC,EAAcF,SAASC,cAAc,kBACrCE,EAAWH,SAASC,cAAc,eAClCG,EAAUJ,SAASC,cAAc,kBACjCI,EAASL,SAASC,cAAc,iBAChCK,EAAWN,SAASO,iBAAiB,UACrCC,EAAWR,SAASO,iBAAiB,YACrCE,EAAWT,SAASO,iBAAiB,gBAS3CG,MAJY,sDAAsDb,iCADlD,CAAGc,OAAS,QAM3BC,MAAKC,IACF,GAAIA,EAASC,GAAI,OAAOD,EAASE,OAC5BC,QAAQC,MAAMJ,EAASK,eAE/BN,MAAKO,IAGFf,EAAQgB,YAAcC,KAAKjC,cAAc+B,EAAItB,KAAKO,SAGlDC,EAAOe,YAAcC,KAAKjC,cAAc+B,EAAItB,KAAKQ,QAGjDN,EAAKqB,YAAeD,EAAIG,KAAK,GAAGC,KAAS,KAAEC,QAAQ,GAGnDrB,EAASiB,YAAcD,EAAItB,KAAK4B,KAGhCvB,EAAYwB,IAAM,SAASP,EAAIG,KAAK,GAAGK,QAAQ,GAAGC,WAClD1B,EAAY2B,IAAM,GAAGV,EAAIG,KAAK,GAAGK,QAAQ,GAAGG,mBAG5C,IAAI,IAAIC,EAAE,EAAEC,EAAE,EAAOb,EAAIG,KAAKW,OAAOD,EAAI,EAAGD,GAAG,EAAEC,GAAK,EAAG,CAErD,MAAME,EAAM,IAAI3C,KAAoB,IAAf4B,EAAIG,KAAKS,GAAGI,IAGjC7B,EAAS0B,GAAGZ,YAAc,GAAGtB,EAASoC,EAAIE,cAAcF,EAAIG,YAG5D7B,EAASwB,GAAGN,IAAM,SAASP,EAAIG,KAAKS,GAAGJ,QAAQ,GAAGC,WAClDpB,EAASwB,GAAGH,IAAM,GAAGV,EAAIG,KAAKS,GAAGJ,QAAQ,GAAGG,mBAG5CrB,EAASuB,GAAGZ,YAAeD,EAAIG,KAAKS,GAAGR,KAAS,KAAEC,QAAQ,OAKjEc,OAAM,IAAMtB,QAAQC,MAAM,qBAY7BsB,YAAc,CAEhBC,MAAOC,GAEH,MAAMC,EAAY1C,SAASC,cAAc,wBACnC0C,EAAY3C,SAASC,cAAc,sBAazC,SAAS2C,IAGL,MAAMzC,EAAWwC,EAAUE,MAC3BF,EAAUE,MAAQ,GAClBF,EAAUG,QAGM,KAAb3C,GAGCsC,EAAO7C,YAAYO,GArB3BuC,EAAUK,iBAAiB,QAASH,GAGpC5C,SAAS+C,iBAAiB,WAAWC,IACnB,UAAVA,EAAEC,KAAiBL,OAuB3BM,OAAOC,OAAS,KACZV,EAAO7C,YAAY,WACnB+C,EAAUG,WAOtBP,YAAYC,MAAMrD","file":"script.js","sourcesContent":["'use strict'\r\n\r\n/**\r\n * Application Name - Weather Application\r\n * Author - Rahul Kumar\r\n * Description - This weather app lets you check weather for today and also for \r\n * next 5 days (including today).\r\n * In the application, Module pattern has been used to make the code cleaner\r\n * User your own openWeather API key to analyse the application\r\n */\r\n\r\n\r\n/******************Module to make api call & display the weather data ***************/\r\nconst AppModule = {\r\n\r\n    timeFormatter (timestamp) {\r\n\r\n        const formattedTime = new Date(timestamp*1000);\r\n        let hours = formattedTime.getHours();\r\n        let min = formattedTime.getMinutes();\r\n\r\n\r\n        hours = hours < 10 ? `0${hours}` : hours;\r\n        min = min < 10 ? `0${min}` : min;\r\n\r\n        return `${hours} : ${min}`;\r\n    },\r\n\r\n    weatherData (city) {\r\n        const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];\r\n\r\n        const temp = document.querySelector('.city__temp span');\r\n        const weatherIcon = document.querySelector('.weather__icon');\r\n        const cityName = document.querySelector('.city__name');\r\n        const sunrise = document.querySelector('.sunrise__time');\r\n        const sunset = document.querySelector('.sunset__time');\r\n        const dayParas = document.querySelectorAll('.day p');\r\n        const dayIcons = document.querySelectorAll('.day img');\r\n        const dayTemps = document.querySelectorAll('.day h3 span')\r\n\r\n\r\n        \r\n        const options = {  method : 'GET' };\r\n        const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid={API KEY}`;\r\n\r\n\r\n        // Make http request to receive the weather data\r\n        fetch(url, options)\r\n        .then(response => {\r\n            if (response.ok) return response.json();\r\n            else console.error(response.statusText);\r\n        })\r\n        .then(res => {\r\n            \r\n            //1. sunrise\r\n            sunrise.textContent = this.timeFormatter(res.city.sunrise);\r\n            \r\n            //2.sunset\r\n            sunset.textContent = this.timeFormatter(res.city.sunset);\r\n\r\n            //3. temperature\r\n            temp.textContent = (res.list[0].main.temp).toFixed(1);\r\n\r\n            //4. city name\r\n            cityName.textContent = res.city.name;\r\n\r\n            //5. weather Icon\r\n            weatherIcon.src = `icons/${res.list[0].weather[0].icon}.png`;\r\n            weatherIcon.alt = `${res.list[0].weather[0].description} icon`;\r\n\r\n            //6. weather details for next 5 days\r\n            for(let i=0,j=0;i <= res.list.length,j < 5; i+=8,j += 1) {\r\n\r\n                const day = new Date(res.list[i].dt*1000);\r\n                \r\n                //date\r\n                dayParas[j].textContent = `${weekDays[day.getDay()]}, ${day.getDate()}`;\r\n                \r\n                //icon\r\n                dayIcons[j].src = `icons/${res.list[i].weather[0].icon}.png`;\r\n                dayIcons[j].alt = `${res.list[i].weather[0].description} icon`;\r\n                \r\n                //temperature\r\n                dayTemps[j].textContent = (res.list[i].main.temp).toFixed(1);\r\n            }\r\n\r\n\r\n        })\r\n        .catch(() => console.error('Network error'));\r\n    }\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/******************* Module to handle event handlers ******************* */\r\nconst EventModule = {\r\n\r\n    event (AppMod) {\r\n\r\n        const searchBtn = document.querySelector('.city__search__btn i');\r\n        const cityField = document.querySelector('.city__name__field');\r\n\r\n         //Event handler for search button\r\n        searchBtn.addEventListener('click', weatherFunc);\r\n\r\n        //event handler for enter key\r\n        document.addEventListener('keydown', e => {\r\n            if (e.key === \"Enter\") weatherFunc();\r\n        })\r\n\r\n\r\n\r\n        // Function to execute after user click on search button\r\n        function weatherFunc() {\r\n\r\n            //1. Take the city name\r\n            const cityName = cityField.value;\r\n            cityField.value = '';\r\n            cityField.focus();\r\n\r\n            //2. Check for valid city name\r\n            if(cityName !== '') {\r\n                \r\n                //Pass the cityname into APP MODULE\r\n                AppMod.weatherData(cityName)\r\n            }\r\n        }\r\n\r\n\r\n        //When browser loads first time\r\n        window.onload = () => {\r\n            AppMod.weatherData('Giridih');\r\n            cityField.focus();\r\n        } \r\n    \r\n    }\r\n \r\n};\r\n\r\nEventModule.event(AppModule);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const searchBtn = document.querySelector('.search__btn');\r\n// const weatherIcon = document.querySelector('.icon__container img');\r\n// const dateLabel = document.querySelector('.date');\r\n// const temp = document.querySelector('.temp__info__container h3 span');\r\n// //const tempInfo = document.querySelector('.temp__info__container h3');\r\n// const weatherType = document.querySelector('.temp__info__container h4');\r\n// const inputField = document.querySelector('.city__search__container input');\r\n// const sunrise = document.querySelector('.sunrise__time');\r\n// const sunset = document.querySelector('.sunset__time');\r\n\r\n\r\n\r\n\r\n// //function to calculate current date\r\n// const displayDate = function () {\r\n//     const months = [\r\n//                     'Jan', 'Feb', 'March', 'April', 'May', 'June',\r\n//                     'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n//                 ];\r\n//     const date = new Date();\r\n//     dateLabel.textContent = `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\r\n// };\r\n// displayDate();\r\n\r\n\r\n\r\n\r\n// //function to display info when entered city is not available\r\n// const naFunc = () => {\r\n//     weatherIcon.src = `icons/unknown.png`;\r\n//     temp.textContent = 'N/A';\r\n//     weatherType.textContent = 'Sorry ðŸ˜®';\r\n//     sunrise.textContent = 'N/A';\r\n//     sunset.textContent = 'N/A'; \r\n// };\r\n\r\n\r\n\r\n\r\n// //function to calculate sunrise and sunset\r\n// const sunCalc = (timestamp) => {\r\n\r\n//     const time = new Date(timestamp*1000);\r\n//     const hour = time.getHours() < 10?`0${time.getHours()}`:time.getHours();\r\n//     const min = time.getMinutes() < 10?`0${time.getMinutes()}`:time.getMinutes();\r\n//     return `${hour}:${min}`;\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// //function which will be executed after clicking search button or pressing enter key\r\n// const asyncFunc = function () {\r\n\r\n//     //Get city name from the search field\r\n//     const city = inputField.value;\r\n//     inputField.value = '';\r\n\r\n//     //Check for valid city name\r\n//     if(city) {  \r\n\r\n//         //fetch data from the API\r\n//         fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=f8ac903dec26469582e704835500db6b`)\r\n//         .then(response => {\r\n\r\n//             if (response.status >= 200 && response.status < 400) {\r\n\r\n//                 response.json()\r\n//                 .then(res => {\r\n\r\n//                     weatherIcon.src = `icons/${res.weather[0].icon}.png`;\r\n//                     temp.textContent = Math.round(res.main.temp);\r\n//                     weatherType.textContent = res.weather[0].main;\r\n//                     sunrise.textContent = sunCalc(res.sys.sunrise);\r\n//                     sunset.textContent = sunCalc(res.sys.sunset);\r\n//                 });\r\n//             }\r\n//             else {\r\n//                naFunc();\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             console.log(error.status);\r\n//         })\r\n//     }  \r\n//     else {\r\n//         naFunc();\r\n//     }\r\n// };\r\n\r\n\r\n\r\n// //Display weather info\r\n// searchBtn.addEventListener('click', asyncFunc);\r\n// window.addEventListener('keydown', function (key) {\r\n//     if(key.key === \"Enter\") asyncFunc();\r\n// });\r\n\r\n\r\n// //When application loads initially\r\n// window.addEventListener('load', naFunc);\r\n"]}